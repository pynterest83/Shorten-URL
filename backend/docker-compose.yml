version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: postgres_container
    environment:
      POSTGRES_USER: shortenurl
      POSTGRES_PASSWORD: shortenurl
      POSTGRES_DB: shortenurl
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shortenurl"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      bash -c "
      # Wait for PostgreSQL to start
      until pg_isready -U shortenurl; do sleep 1; done;
      # Create the partitioned table and partitions
      psql -U shortenurl -d shortenurl -c \"
      CREATE TABLE customers (
          id SERIAL PRIMARY KEY,
          status TEXT NOT NULL,
          arr NUMERIC
      ) PARTITION BY LIST (status);

      CREATE TABLE cust_active PARTITION OF customers FOR VALUES IN ('ACTIVE');
      CREATE TABLE cust_archived PARTITION OF customers FOR VALUES IN ('EXPIRED');
      CREATE TABLE cust_others PARTITION OF customers DEFAULT;
      \"
      "

  redis-7000:
    image: redis:latest
    container_name: redis_7000
    command: >
      redis-server --port 7000 --cluster-enabled yes --cluster-config-file nodes-7000.conf 
      --cluster-node-timeout 5000 --appendonly yes --dir /data
    ports:
      - "7000:7000"
      - "17000:17000"
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7000", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-7001:
    image: redis:latest
    container_name: redis_7001
    command: >
      redis-server --port 7001 --cluster-enabled yes --cluster-config-file nodes-7001.conf 
      --cluster-node-timeout 5000 --appendonly yes --dir /data
    ports:
      - "7001:7001"
      - "17001:17001"
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7001", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-7002:
    image: redis:latest
    container_name: redis_7002
    command: >
      redis-server --port 7002 --cluster-enabled yes --cluster-config-file nodes-7002.conf 
      --cluster-node-timeout 5000 --appendonly yes --dir /data
    ports:
      - "7002:7002"
      - "17002:17002"
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7002", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-7100:
    image: redis:latest
    container_name: redis_7100
    command: >
      redis-server --port 7100 --cluster-enabled yes --cluster-config-file nodes-7100.conf 
      --cluster-node-timeout 5000 --appendonly yes --dir /data
    ports:
      - "7100:7100"
      - "17100:17100"
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7100", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-7101:
    image: redis:latest
    container_name: redis_7101
    command: >
      redis-server --port 7101 --cluster-enabled yes --cluster-config-file nodes-7101.conf 
      --cluster-node-timeout 5000 --appendonly yes --dir /data
    ports:
      - "7101:7101"
      - "17101:17101"
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7101", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-7102:
    image: redis:latest
    container_name: redis_7102
    command: >
      redis-server --port 7102 --cluster-enabled yes --cluster-config-file nodes-7102.conf 
      --cluster-node-timeout 5000 --appendonly yes --dir /data
    ports:
      - "7102:7102"
      - "17102:17102"
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7102", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-init:
    image: redis:latest
    container_name: redis_init
    depends_on:
      - redis-7000
      - redis-7001
      - redis-7002
      - redis-7100
      - redis-7101
      - redis-7102
    volumes:
      - ./init-redis-cluster.sh:/init-redis-cluster.sh
    entrypoint: ["sh", "/init-redis-cluster.sh"]

volumes:
  postgres_data: